42c42
< ** may be set prior to where they take effect, but after platform setup. 
---
> ** may be set prior to where they take effect, but after platform setup.
1451c1451
<     fprintf(memtraceOut, "MEMTRACE: allocate %d bytes\n", 
---
>     fprintf(memtraceOut, "MEMTRACE: allocate %d bytes\n",
2024c2024
< ** size is 256.  If X is a BLOB, it is hashed as is.  
---
> ** size is 256.  If X is a BLOB, it is hashed as is.
2339,2340c2339,2340
<   sqlite3 *db, 
<   char **pzErrMsg, 
---
>   sqlite3 *db,
>   char **pzErrMsg,
2493c2493
<     if( iExp>0 ){   
---
>     if( iExp>0 ){
2901c2901
<    || pB==0 || pB->oom || pB->isNull 
---
>    || pB==0 || pB->oom || pB->isNull
2947,2948c2947,2948
<   sqlite3 *db, 
<   char **pzErrMsg, 
---
>   sqlite3 *db,
>   char **pzErrMsg,
3251,3252c3251,3252
<   sqlite3 *db, 
<   char **pzErrMsg, 
---
>   sqlite3 *db,
>   char **pzErrMsg,
3510c3510
< /* True to cause run-time checking of the start=, stop=, and/or step= 
---
> /* True to cause run-time checking of the start=, stop=, and/or step=
3521c3521
< ** once prior to any call to seriesColumn() or seriesRowid() or 
---
> ** once prior to any call to seriesColumn() or seriesRowid() or
3541c3541
<   sqlite3_vtab_cursor *pVtabCursor, 
---
>   sqlite3_vtab_cursor *pVtabCursor,
3668c3668
<     /* Both start= and stop= boundaries are available.  This is the 
---
>     /* Both start= and stop= boundaries are available.  This is the
3691c3691
< ** This following structure defines all the methods for the 
---
> ** This following structure defines all the methods for the
3727,3728c3727,3728
<   sqlite3 *db, 
<   char **pzErrMsg, 
---
>   sqlite3 *db,
>   char **pzErrMsg,
3917c3917
< ** be clear:  this routine converts utf8 to unicode.  This routine is 
---
> ** be clear:  this routine converts utf8 to unicode.  This routine is
3988c3988
<     while( in.i+pRe->nInit<=in.mx 
---
>     while( in.i+pRe->nInit<=in.mx
4458c4458
<   ** zInit[].  The re_match() routine can then search ahead in the input 
---
>   ** zInit[].  The re_match() routine can then search ahead in the input
4600,4601c4600,4601
<   sqlite3 *db, 
<   char **pzErrMsg, 
---
>   sqlite3 *db,
>   char **pzErrMsg,
4607c4607
<   rc = sqlite3_create_function(db, "regexp", 2, 
---
>   rc = sqlite3_create_function(db, "regexp", 2,
4701,4702c4701,4702
< **   $path is a relative path, then $path is interpreted relative to $dir. 
< **   And the paths returned in the "name" column of the table are also 
---
> **   $path is a relative path, then $path is interpreted relative to $dir.
> **   And the paths returned in the "name" column of the table are also
4757c4757
< ** Set the result stored by context ctx to a blob containing the 
---
> ** Set the result stored by context ctx to a blob containing the
4990c4990
< ** This function does the work for the writefile() UDF. Refer to 
---
> ** This function does the work for the writefile() UDF. Refer to
5105c5105
< ** Implementation of the "writefile(W,X[,Y[,Z]]])" SQL function.  
---
> ** Implementation of the "writefile(W,X[,Y[,Z]]])" SQL function.
5119c5119
<     sqlite3_result_error(context, 
---
>     sqlite3_result_error(context,
5189c5189
< /* 
---
> /*
5337c5337
<     
---
> 
5468c5468
<   sqlite3_vtab_cursor *cur, 
---
>   sqlite3_vtab_cursor *cur,
5557c5557
<     } 
---
>     }
5628,5629c5628,5629
<   sqlite3 *db, 
<   char **pzErrMsg, 
---
>   sqlite3 *db,
>   char **pzErrMsg,
5635c5635
<   rc = sqlite3_create_function(db, "readfile", 1, 
---
>   rc = sqlite3_create_function(db, "readfile", 1,
6012c6012
< ** once prior to any call to completionColumn() or completionRowid() or 
---
> ** once prior to any call to completionColumn() or completionRowid() or
6016c6016
<   sqlite3_vtab_cursor *pVtabCursor, 
---
>   sqlite3_vtab_cursor *pVtabCursor,
6108c6108
< ** This following structure defines all the methods for the 
---
> ** This following structure defines all the methods for the
6152,6153c6152,6153
<   sqlite3 *db, 
<   char **pzErrMsg, 
---
>   sqlite3 *db,
>   char **pzErrMsg,
6349c6349
<   0,                            /* pAppData (set when registered) */ 
---
>   0,                            /* pAppData (set when registered) */
6402,6404c6402,6404
<   sqlite3_file *pFile, 
<   void *zBuf, 
<   int iAmt, 
---
>   sqlite3_file *pFile,
>   void *zBuf,
>   int iAmt,
6709c6709
<     ** the base dispatch-table so this instance mimics the base VFS. 
---
>     ** the base dispatch-table so this instance mimics the base VFS.
6724c6724
<     /* Round newly added appendvfs location to #define'd page boundary. 
---
>     /* Round newly added appendvfs location to #define'd page boundary.
6748,6750c6748,6750
<   sqlite3_vfs *pVfs, 
<   const char *zPath, 
<   int flags, 
---
>   sqlite3_vfs *pVfs,
>   const char *zPath,
>   int flags,
6756,6758c6756,6758
<   sqlite3_vfs *pVfs, 
<   const char *zPath, 
<   int nOut, 
---
>   sqlite3_vfs *pVfs,
>   const char *zPath,
>   int nOut,
6807c6807
<   
---
> 
6811c6811
< /* 
---
> /*
6816,6817c6816,6817
<   sqlite3 *db, 
<   char **pzErrMsg, 
---
>   sqlite3 *db,
>   char **pzErrMsg,
6921c6921
< ** In some ways it would be better to obtain these values from system 
---
> ** In some ways it would be better to obtain these values from system
6924c6924
< ** are also made explicit in [man stat], and (c) are part of the 
---
> ** are also made explicit in [man stat], and (c) are part of the
6937c6937
< static const char ZIPFILE_SCHEMA[] = 
---
> static const char ZIPFILE_SCHEMA[] =
6958,6959c6958,6959
< **   entries. The upper byte indicates "unix", and the lower byte 
< **   indicates that the zip file matches pkzip specification 3.0. 
---
> **   entries. The upper byte indicates "unix", and the lower byte
> **   indicates that the zip file matches pkzip specification 3.0.
6988c6988
< ** The sizes of the fixed-size part of each of the three main data 
---
> ** The sizes of the fixed-size part of each of the three main data
7081c7081
< ***   
---
> ***
7107c7107
< /* 
---
> /*
7180c7180
< ** 
---
> **
7248c7248
< ** Release resources that should be freed at the end of a write 
---
> ** Release resources that should be freed at the end of a write
7357c7357
< ** otherwise. 
---
> ** otherwise.
7565c7565
< **     Bits 09-15: years from 1980 
---
> **     Bits 09-15: years from 1980
7625,7627c7625,7627
<   assert( mUnixTime<315507600 
<        || mUnixTime==zipfileMtime(pCds) 
<        || ((mUnixTime % 2) && mUnixTime-1==zipfileMtime(pCds)) 
---
>   assert( mUnixTime<315507600
>        || mUnixTime==zipfileMtime(pCds)
>        || ((mUnixTime % 2) && mUnixTime-1==zipfileMtime(pCds))
7694c7694
<       pNew->cds.zFile = sqlite3_mprintf("%.*s", nFile, aRead); 
---
>       pNew->cds.zFile = sqlite3_mprintf("%.*s", nFile, aRead);
7722c7722
<         *pzErr = sqlite3_mprintf("failed to read LFH at offset %d", 
---
>         *pzErr = sqlite3_mprintf("failed to read LFH at offset %d",
7774,7775c7774,7775
< static void zipfileFree(void *p) { 
<   sqlite3_free(p); 
---
> static void zipfileFree(void *p) {
>   sqlite3_free(p);
7825c7825
< ** sqlite3_free() to release buffer (*ppOut). Before returning, (*pnOut) 
---
> ** sqlite3_free() to release buffer (*ppOut). Before returning, (*pnOut)
8011,8012c8011,8012
<       if( aRead[i]==0x50 && aRead[i+1]==0x4b 
<        && aRead[i+2]==0x05 && aRead[i+3]==0x06 
---
>       if( aRead[i]==0x50 && aRead[i+1]==0x4b
>        && aRead[i+2]==0x05 && aRead[i+3]==0x06
8037c8037
< ** Add object pNew to the linked list that begins at ZipfileTab.pFirstEntry 
---
> ** Add object pNew to the linked list that begins at ZipfileTab.pFirstEntry
8043,8044c8043,8044
<   ZipfileTab *pTab, 
<   ZipfileEntry *pBefore, 
---
>   ZipfileTab *pTab,
>   ZipfileEntry *pBefore,
8090c8090
<   sqlite3_vtab_cursor *cur, 
---
>   sqlite3_vtab_cursor *cur,
8249c8249
<   sqlite3_value *pVal, 
---
>   sqlite3_value *pVal,
8312c8312
<   ** structure into memory. During the transaction any new file data is 
---
>   ** structure into memory. During the transaction any new file data is
8385,8387c8385,8387
<   sqlite3_vtab *pVtab, 
<   int nVal, 
<   sqlite3_value **apVal, 
---
>   sqlite3_vtab *pVtab,
>   int nVal,
>   sqlite3_value **apVal,
8440c8440
<       zipfileTableErr(pTab, "rawdata must be NULL"); 
---
>       zipfileTableErr(pTab, "rawdata must be NULL");
9030c9030
<     rc = sqlite3_create_function(db, "zipfile", -1, SQLITE_UTF8, 0, 0, 
---
>     rc = sqlite3_create_function(db, "zipfile", -1, SQLITE_UTF8, 0, 0,
9048,9049c9048,9049
<   sqlite3 *db, 
<   char **pzErrMsg, 
---
>   sqlite3 *db,
>   char **pzErrMsg,
9166,9167c9166,9167
<   sqlite3 *db, 
<   char **pzErrMsg, 
---
>   sqlite3 *db,
>   char **pzErrMsg,
9173c9173
<   rc = sqlite3_create_function(db, "sqlar_compress", 1, 
---
>   rc = sqlite3_create_function(db, "sqlar_compress", 1,
9223c9223
< **   associated with the table. For large databases, this can be 
---
> **   associated with the table. For large databases, this can be
9283c9283
< ** an error occurs, an SQLite error code is returned and (*pzErr) set to 
---
> ** an error occurs, an SQLite error code is returned and (*pzErr) set to
9312c9312
< ** For some EXPERT_REPORT_* parameters, the buffer returned contains 
---
> ** For some EXPERT_REPORT_* parameters, the buffer returned contains
9325c9325
< **   indexes for statement iStmt. If there are no new recommeded indexes, NULL 
---
> **   indexes for statement iStmt. If there are no new recommeded indexes, NULL
9333c9333
< **   Return a pointer to a buffer containing the CREATE INDEX statements 
---
> **   Return a pointer to a buffer containing the CREATE INDEX statements
9348,9349c9348,9349
< ** Free an (sqlite3expert*) handle and all associated resources. There 
< ** should be one call to this function for each successful call to 
---
> ** Free an (sqlite3expert*) handle and all associated resources. There
> ** should be one call to this function for each successful call to
9392c9392
< #ifndef SQLITE_OMIT_VIRTUALTABLE 
---
> #ifndef SQLITE_OMIT_VIRTUALTABLE
9445c9445
< ** Information regarding a single database table. Extracted from 
---
> ** Information regarding a single database table. Extracted from
9529c9529
< ** Allocate and return nByte bytes of zeroed memory using sqlite3_malloc(). 
---
> ** Allocate and return nByte bytes of zeroed memory using sqlite3_malloc().
9585c9585
< ** the hash table passed as the second argument. 
---
> ** the hash table passed as the second argument.
9588,9589c9588,9589
<   int *pRc, 
<   IdxHash *pHash, 
---
>   int *pRc,
>   IdxHash *pHash,
9621c9621
< ** If zKey/nKey is present in the hash table, return a pointer to the 
---
> ** If zKey/nKey is present in the hash table, return a pointer to the
9760c9760
< /* 
---
> /*
9816c9816
<   const int opmask = 
---
>   const int opmask =
9833,9834c9833,9834
<       if( pCons->usable 
<        && pCons->iColumn>=0 
---
>       if( pCons->usable
>        && pCons->iColumn>=0
9836c9836
<        && (pCons->op & opmask) 
---
>        && (pCons->op & opmask)
9879,9881c9879,9881
<   sqlite3_vtab *pVtab, 
<   int nData, 
<   sqlite3_value **azData, 
---
>   sqlite3_vtab *pVtab,
>   int nData,
>   sqlite3_value **azData,
9891c9891
< /* 
---
> /*
9903c9903
< /* 
---
> /*
9916c9916
< ** Return non-zero if the cursor does not currently point to a valid 
---
> ** Return non-zero if the cursor does not currently point to a valid
9924c9924
< /* 
---
> /*
9943c9943
< /* 
---
> /*
9952c9952
< /* 
---
> /*
9965c9965
< /* 
---
> /*
9969c9969
<   sqlite3_vtab_cursor *cur, 
---
>   sqlite3_vtab_cursor *cur,
10138c10138
< ** This function is a no-op if *pRc is set to anything other than 
---
> ** This function is a no-op if *pRc is set to anything other than
10181c10181
<   
---
> 
10232c10232
< ** would create from arguments pScan, pEq and pTail. If no error occurs and 
---
> ** would create from arguments pScan, pEq and pTail. If no error occurs and
10322c10322
<   IdxConstraint *pEq, 
---
>   IdxConstraint *pEq,
10416c10416
<   sqlite3expert *p, 
---
>   sqlite3expert *p,
10451c10451
< ** Create candidate indexes in database [dbm] based on the data in 
---
> ** Create candidate indexes in database [dbm] based on the data in
10498c10498
< ** Free all elements of the linked list starting from pStatement up 
---
> ** Free all elements of the linked list starting from pStatement up
10576,10577c10576,10577
<         }else if( i+22<nDetail 
<             && memcmp(&zDetail[i], " USING COVERING INDEX ", 22)==0 
---
>         }else if( i+22<nDetail
>             && memcmp(&zDetail[i], " USING COVERING INDEX ", 22)==0
10652,10653c10652,10653
<   sqlite3expert *p, 
<   IdxWrite *pWrite, 
---
>   sqlite3expert *p,
>   IdxWrite *pWrite,
10660c10660
<   const char *zSql = 
---
>   const char *zSql =
10702c10702
<         zWrite = idxAppendText(&rc, zWrite, "%s%Q=?", i==0 ? "" : ", ", 
---
>         zWrite = idxAppendText(&rc, zWrite, "%s%Q=?", i==0 ? "" : ", ",
10791c10791
<           zInner = idxAppendText(&rc, zInner, "%s%Q COLLATE %s", 
---
>           zInner = idxAppendText(&rc, zInner, "%s%Q COLLATE %s",
10798c10798
<         zOuter = idxAppendText(&rc, 0, 
---
>         zOuter = idxAppendText(&rc, 0,
10939c10939
<   const char *zMax = 
---
>   const char *zMax =
10982c10982
<     zCols = idxAppendText(&rc, zCols, 
---
>     zCols = idxAppendText(&rc, zCols,
11079c11079
< ** The stat1 data is generated by querying the 
---
> ** The stat1 data is generated by querying the
11085c11085
<   struct IdxSampleCtx samplectx; 
---
>   struct IdxSampleCtx samplectx;
11097c11097
<   const char *zIndexXInfo = 
---
>   const char *zIndexXInfo =
11154c11154
<     rc = sqlite3_exec(p->dbv, 
---
>     rc = sqlite3_exec(p->dbv,
11204c11204
<   
---
> 
11209c11209
<     rc = idxPrintfPrepareStmt(pNew->db, &pSql, pzErrmsg, 
---
>     rc = idxPrintfPrepareStmt(pNew->db, &pSql, pzErrmsg,
11334,11335c11334,11335
<     p->zCandidates = idxAppendText(&rc, p->zCandidates, 
<         "%s;%s%s\n", pEntry->zVal, 
---
>     p->zCandidates = idxAppendText(&rc, p->zCandidates,
>         "%s;%s%s\n", pEntry->zVal,
11462c11462
< **   the sqlite_dbdata table contains, as well as from entries related to 
---
> **   the sqlite_dbdata table contains, as well as from entries related to
11490c11490
< #if !defined(SQLITEINT_H) 
---
> #if !defined(SQLITEINT_H)
11503c11503
< #define DBDATA_PADDING_BYTES 100 
---
> #define DBDATA_PADDING_BYTES 100
11530c11530
<   
---
> 
11569c11569
< ** Connect to an sqlite_dbdata (pAux==0) or sqlite_dbptr (pAux!=0) virtual 
---
> ** Connect to an sqlite_dbdata (pAux==0) or sqlite_dbptr (pAux!=0) virtual
11688c11688
< ** Restore a cursor object to the state it was in when first allocated 
---
> ** Restore a cursor object to the state it was in when first allocated
11719,11720c11719,11720
< /* 
< ** Utility methods to decode 16 and 32-bit big-endian unsigned integers. 
---
> /*
> ** Utility methods to decode 16 and 32-bit big-endian unsigned integers.
11842c11842
<   sqlite3_context *pCtx, 
---
>   sqlite3_context *pCtx,
11844c11844
<   int eType, 
---
>   int eType,
11850,11852c11850,11852
<       case 0: 
<       case 10: 
<       case 11: 
---
>       case 0:
>       case 10:
>       case 11:
11855,11856c11855,11856
<       
<       case 8: 
---
> 
>       case 8:
11862c11862
<   
---
> 
11874c11874
<   
---
> 
11884c11884
<   
---
> 
11958c11958
<   
---
> 
11977c11977
<   
---
> 
11984c11984
<     
---
> 
11987c11987
<     
---
> 
11994c11994
<     
---
> 
11999c11999
<     
---
> 
12025c12025
<             ** overruns caused by attempting to read a varint or similar from 
---
>             ** overruns caused by attempting to read a varint or similar from
12058c12058
<     
---
> 
12105c12105
< /* 
---
> /*
12125c12125
< /* 
---
> /*
12127c12127
< ** "main", "temp" or the name of an attached database) and set 
---
> ** "main", "temp" or the name of an attached database) and set
12174c12174
< /* 
---
> /*
12178c12178
<   sqlite3_vtab_cursor *pCursor, 
---
>   sqlite3_vtab_cursor *pCursor,
12214c12214
<       rc = sqlite3_prepare_v2(pTab->db, 
---
>       rc = sqlite3_prepare_v2(pTab->db,
12242,12243c12242,12243
<   sqlite3_vtab_cursor *pCursor, 
<   sqlite3_context *ctx, 
---
>   sqlite3_vtab_cursor *pCursor,
>   sqlite3_context *ctx,
12286c12286
<               ctx, pCsr->enc, iType, pCsr->pPtr, 
---
>               ctx, pCsr->enc, iType, pCsr->pPtr,
12297c12297
< /* 
---
> /*
12349,12350c12349,12350
<   sqlite3 *db, 
<   char **pzErrMsg, 
---
>   sqlite3 *db,
>   char **pzErrMsg,
12392,12393c12392,12393
< **      returns SQLITE_DONE, then the recovery operation completed without 
< **      error. If it returns some other non-SQLITE_OK value, then an error 
---
> **      returns SQLITE_DONE, then the recovery operation completed without
> **      error. If it returns some other non-SQLITE_OK value, then an error
12403c12403
< ** The application may abandon the recovery operation at any point 
---
> ** The application may abandon the recovery operation at any point
12442c12442
< /* 
---
> /*
12459c12459
< ** output, the callback function passed as the third argument (xSql) is 
---
> ** output, the callback function passed as the third argument (xSql) is
12462c12462
< ** nul-terminated buffer containing the SQL statement formated as UTF-8 as 
---
> ** nul-terminated buffer containing the SQL statement formated as UTF-8 as
12473,12474c12473,12474
<   sqlite3* db, 
<   const char *zDb, 
---
>   sqlite3* db,
>   const char *zDb,
12478,12479c12478,12479
<   sqlite3* db, 
<   const char *zDb, 
---
>   sqlite3* db,
>   const char *zDb,
12512c12512
< **   SQLITE_RECOVER_LOST_AND_FOUND, then is assumed that the freelist is 
---
> **   SQLITE_RECOVER_LOST_AND_FOUND, then is assumed that the freelist is
12516c12516
< **   database, but often ends up "recovering" deleted records. The default 
---
> **   database, but often ends up "recovering" deleted records. The default
12530c12530
< **   (argument is 0), then when creating an output database, the recover 
---
> **   (argument is 0), then when creating an output database, the recover
12538c12538
< **   are created in the output database before it is populated with 
---
> **   are created in the output database before it is populated with
12550c12550
< ** Perform a unit of work towards the recovery operation. This function 
---
> ** Perform a unit of work towards the recovery operation. This function
12566c12566
< /* 
---
> /*
12578,12580c12578,12580
< ** sqlite3_recover_step(), then this function attempts to return a 
< ** pointer to a buffer containing an English language explanation of 
< ** the error. If no error message is available, or if an out-of memory 
---
> ** sqlite3_recover_step(), then this function attempts to return a
> ** pointer to a buffer containing an English language explanation of
> ** the error. If no error message is available, or if an out-of memory
12595c12595
< /* 
---
> /*
12664c12664
< **   aCol[] is an array of nCol columns. In the order in which they appear 
---
> **   aCol[] is an array of nCol columns. In the order in which they appear
12676c12676
< **   Otherwise, it contains -1. If the table does contain an INTEGER PRIMARY 
---
> **   Otherwise, it contains -1. If the table does contain an INTEGER PRIMARY
12747c12747
< **   In other words, the following is true if bit iKey is set, or 
---
> **   In other words, the following is true if bit iKey is set, or
12888c12888
< */ 
---
> */
12892c12892
< /* 
---
> /*
12933,12934c12933,12934
< ** This function is a no-op if the recover handle passed as the first 
< ** argument already contains an error (if p->errCode!=SQLITE_OK). 
---
> ** This function is a no-op if the recover handle passed as the first
> ** argument already contains an error (if p->errCode!=SQLITE_OK).
12960,12961c12960,12961
< ** Parameter zFmt must be a printf() style formatting string. The handle 
< ** error message is set to the result of using any trailing arguments for 
---
> ** Parameter zFmt must be a printf() style formatting string. The handle
> ** error message is set to the result of using any trailing arguments for
12969,12970c12969,12970
<   sqlite3_recover *p, 
<   int errCode, 
---
>   sqlite3_recover *p,
>   int errCode,
13049c13049
< ** (if p->errCode!=SQLITE_OK). 
---
> ** (if p->errCode!=SQLITE_OK).
13058c13058
<   sqlite3 *db, 
---
>   sqlite3 *db,
13072c13072
< ** (if p->errCode!=SQLITE_OK). 
---
> ** (if p->errCode!=SQLITE_OK).
13083c13083
<   sqlite3 *db, 
---
>   sqlite3 *db,
13104c13104
< ** Reset SQLite statement handle pStmt. If the call to sqlite3_reset() 
---
> ** Reset SQLite statement handle pStmt. If the call to sqlite3_reset()
13121c13121
< ** Finalize SQLite statement handle pStmt. If the call to sqlite3_reset() 
---
> ** Finalize SQLite statement handle pStmt. If the call to sqlite3_reset()
13136c13136
< ** (if p->errCode!=SQLITE_OK). A copy of p->errCode is returned in this 
---
> ** (if p->errCode!=SQLITE_OK). A copy of p->errCode is returned in this
13159,13161c13159,13161
<   sqlite3_recover *p, 
<   sqlite3_stmt *pStmt, 
<   int iBind, 
---
>   sqlite3_recover *p,
>   sqlite3_stmt *pStmt,
>   int iBind,
13223,13224c13223,13224
< ** Implementation of SQL scalar function "read_i32". The first argument to 
< ** this function must be a blob. The second a non-negative integer. This 
---
> ** Implementation of SQL scalar function "read_i32". The first argument to
> ** this function must be a blob. The second a non-negative integer. This
13231,13232c13231,13232
<   sqlite3_context *context, 
<   int argc, 
---
>   sqlite3_context *context,
>   int argc,
13260c13260
< ** The only argument to this function is a page-number. It returns true 
---
> ** The only argument to this function is a page-number. It returns true
13278c13278
< ** The implementation of a user-defined SQL function invoked by the 
---
> ** The implementation of a user-defined SQL function invoked by the
13284,13285c13284,13285
< ** recovered. If the argument is greater than zero, it is a page number. 
< ** The value returned in this case is an SQL blob containing the data for 
---
> ** recovered. If the argument is greater than zero, it is a page number.
> ** The value returned in this case is an SQL blob containing the data for
13289c13289
< **     SELECT getpage(4);       -- return page 4 of db as a blob of data 
---
> **     SELECT getpage(4);       -- return page 4 of db as a blob of data
13371,13372c13371,13372
<   sqlite3_context *context, 
<   int argc, 
---
>   sqlite3_context *context,
>   int argc,
13450c13450
< ** this case. 
---
> ** this case.
13480,13481c13480,13481
< ** If this recover handle is not in SQL callback mode (i.e. was not created 
< ** using sqlite3_recover_init_sql()) of if an error has already occurred, 
---
> ** If this recover handle is not in SQL callback mode (i.e. was not created
> ** using sqlite3_recover_init_sql()) of if an error has already occurred,
13483c13483
< ** zSql as the parameter. 
---
> ** zSql as the parameter.
13517,13518c13517,13518
<   /* Truncate the output database to 0 pages in size. This is done by 
<   ** opening a new, empty, temp db, then using the backup API to clobber 
---
>   /* Truncate the output database to 0 pages in size. This is done by
>   ** opening a new, empty, temp db, then using the backup API to clobber
13564c13564
< ** this case. 
---
> ** this case.
13607c13607
<     p->errCode = sqlite3_create_function(db, aFunc[ii].zName, 
---
>     p->errCode = sqlite3_create_function(db, aFunc[ii].zName,
13618c13618
< ** This temporary database is used during the recovery process and then 
---
> ** This temporary database is used during the recovery process and then
13626c13626
<       "CREATE TABLE recovery.map(pgno INTEGER PRIMARY KEY, parent INT);" 
---
>       "CREATE TABLE recovery.map(pgno INTEGER PRIMARY KEY, parent INT);"
13643c13643
< ** Parameter iRoot must be the root page of table zName in the INPUT 
---
> ** Parameter iRoot must be the root page of table zName in the INPUT
13647c13647
<   sqlite3_recover *p, 
---
>   sqlite3_recover *p,
13651c13651
<   sqlite3_stmt *pStmt = recoverPreparePrintf(p, p->dbOut, 
---
>   sqlite3_stmt *pStmt = recoverPreparePrintf(p, p->dbOut,
13752c13752
< ** If the handle is in SQL callback mode, then callbacks are invoked 
---
> ** If the handle is in SQL callback mode, then callbacks are invoked
13877c13877
< ** only 3 are written to the output, as the generated STORED column 
---
> ** only 3 are written to the output, as the generated STORED column
13885c13885
< **     SELECT 'INSERT INTO (a, c, d) VALUES (' 
---
> **     SELECT 'INSERT INTO (a, c, d) VALUES ('
13894c13894
<   sqlite3_recover *p, 
---
>   sqlite3_recover *p,
13934c13934
<         zBind = recoverMPrintf(p, 
---
>         zBind = recoverMPrintf(p,
13946c13946
<     zFinal = recoverMPrintf(p, "SELECT %Q || ') VALUES (' || %s || ')'", 
---
>     zFinal = recoverMPrintf(p, "SELECT %Q || ') VALUES (' || %s || ')'",
13957c13957
<   
---
> 
13974c13974
< ** This function attempts to create a lost and found table within the 
---
> ** This function attempts to create a lost and found table within the
13979c13979
< ** If an error occurs, NULL is returned and an error code and error 
---
> ** If an error occurs, NULL is returned and an error code and error
14086c14086
< ** an SQLite error code is returned and the final value of *piRoot 
---
> ** an SQLite error code is returned and the final value of *piRoot
14090c14090
<   sqlite3_recover *p, 
---
>   sqlite3_recover *p,
14196c14196
< ** Perform one step (sqlite3_recover_step()) of work for the connection 
---
> ** Perform one step (sqlite3_recover_step()) of work for the connection
14198,14199c14198,14199
< ** RECOVER_STATE_LOSTANDFOUND3 state - during which the lost-and-found 
< ** table of the output database is populated with recovered data that can 
---
> ** RECOVER_STATE_LOSTANDFOUND3 state - during which the lost-and-found
> ** table of the output database is populated with recovered data that can
14201c14201
< */ 
---
> */
14226,14228c14226,14228
< ** Initialize resources required in RECOVER_STATE_LOSTANDFOUND3 
< ** state - during which the lost-and-found table of the output database 
< ** is populated with recovered data that can not be assigned to any 
---
> ** Initialize resources required in RECOVER_STATE_LOSTANDFOUND3
> ** state - during which the lost-and-found table of the output database
> ** is populated with recovered data that can not be assigned to any
14230c14230
< */ 
---
> */
14254c14254
<     pLaf->apVal = (sqlite3_value**)recoverMalloc(p, 
---
>     pLaf->apVal = (sqlite3_value**)recoverMalloc(p,
14264c14264
< */ 
---
> */
14289c14289
<   p1->pSel = recoverPrepare(p, p->dbOut, 
---
>   p1->pSel = recoverPrepare(p, p->dbOut,
14306c14306
< ** Clean up resources allocated by recoverWriteDataInit() (stuff in 
---
> ** Clean up resources allocated by recoverWriteDataInit() (stuff in
14323c14323
< ** Perform one step (sqlite3_recover_step()) of work for the connection 
---
> ** Perform one step (sqlite3_recover_step()) of work for the connection
14327c14327
< */ 
---
> */
14355c14355
<       /* Bind the root page of this table within the original database to 
---
>       /* Bind the root page of this table within the original database to
14453c14453
< */ 
---
> */
14501c14501
< ** Perform one step (sqlite3_recover_step()) of work for the connection 
---
> ** Perform one step (sqlite3_recover_step()) of work for the connection
14505c14505
< */ 
---
> */
14524c14524
< ** Initialize resources required by RECOVER_STATE_LOSTANDFOUND2 
---
> ** Initialize resources required by RECOVER_STATE_LOSTANDFOUND2
14527c14527
< */ 
---
> */
14553c14553
< ** Perform one step (sqlite3_recover_step()) of work for the connection 
---
> ** Perform one step (sqlite3_recover_step()) of work for the connection
14555,14556c14555,14556
< ** RECOVER_STATE_LOSTANDFOUND2 state - during which the pages identified 
< ** in RECOVER_STATE_LOSTANDFOUND1 are sorted into sets that likely belonged 
---
> ** RECOVER_STATE_LOSTANDFOUND2 state - during which the pages identified
> ** in RECOVER_STATE_LOSTANDFOUND1 are sorted into sets that likely belonged
14558c14558
< */ 
---
> */
14567c14567
<         sqlite3_bind_value(pLaf->pMapInsert, 2, 
---
>         sqlite3_bind_value(pLaf->pMapInsert, 2,
14636c14636
<     int res = 
---
>     int res =
14645c14645
< ** Decode and return an unsigned 16-bit big-endian integer value from 
---
> ** Decode and return an unsigned 16-bit big-endian integer value from
14653c14653
< ** Decode and return an unsigned 32-bit big-endian integer value from 
---
> ** Decode and return an unsigned 32-bit big-endian integer value from
14678,14679c14678,14679
< ** or a prefix thereof appears to contain a well-formed SQLite b-tree page, 
< ** return the page-size in bytes. Otherwise, if the buffer does not 
---
> ** or a prefix thereof appears to contain a well-formed SQLite b-tree page,
> ** return the page-size in bytes. Otherwise, if the buffer does not
14840,14841c14840,14841
< ** Detect the page-size of the database opened by file-handle pFd by 
< ** searching the first part of the file for a well-formed SQLite b-tree 
---
> ** Detect the page-size of the database opened by file-handle pFd by
> ** searching the first part of the file for a well-formed SQLite b-tree
14934c14934
<       ** and application-id fields - all 32 bit quantities at offsets 
---
>       ** and application-id fields - all 32 bit quantities at offsets
14937c14937
<       ** Byte offset 105 should also contain the page-size as a 16-bit 
---
>       ** Byte offset 105 should also contain the page-size as a 16-bit
14942c14942
<         0x53, 0x51, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x66, 
---
>         0x53, 0x51, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x66,
15034c15034
<   return rc;                                              
---
>   return rc;
15122,15124c15122,15124
<   sqlite3_file *pFd, 
<   sqlite3_int64 iOff, 
<   int iAmt, 
---
>   sqlite3_file *pFd,
>   sqlite3_int64 iOff,
>   int iAmt,
15187c15187
<       /* Open the output database. And register required virtual tables and 
---
>       /* Open the output database. And register required virtual tables and
15209c15209
<       
---
> 
15294,15295c15294,15295
<   sqlite3* db, 
<   const char *zDb, 
---
>   sqlite3* db,
>   const char *zDb,
15332,15333c15332,15333
<   sqlite3* db, 
<   const char *zDb, 
---
>   sqlite3* db,
>   const char *zDb,
15344,15345c15344,15345
<   sqlite3* db, 
<   const char *zDb, 
---
>   sqlite3* db,
>   const char *zDb,
15903c15903
<     } 
---
>     }
17656c17656
<   const char zDash[] = 
---
>   const char zDash[] =
17785c17785
<   return (char*)zOut;  
---
>   return (char*)zOut;
18146,18147c18146,18147
<   ShellState *pState, 
<   const char *zSql, 
---
>   ShellState *pState,
>   const char *zSql,
18157c18157
< ** created by the ".expert" command (if bCancel==1), or to generate a 
---
> ** created by the ".expert" command (if bCancel==1), or to generate a
19213c19213
<   return rc;  
---
>   return rc;
19312,19313c19312,19313
<   sqlite3_context *context, 
<   int argc, 
---
>   sqlite3_context *context,
>   int argc,
19340,19341c19340,19341
<   sqlite3_context *context, 
<   int argc, 
---
>   sqlite3_context *context,
>   int argc,
19356,19357c19356,19357
<   sqlite3_context *context, 
<   int argcUnused, 
---
>   sqlite3_context *context,
>   int argcUnused,
19369c19369
< ** function quote(). If the first character of the input is "'", 
---
> ** function quote(). If the first character of the input is "'",
19380,19381c19380,19381
<   sqlite3_context *context, 
<   int argc, 
---
>   sqlite3_context *context,
>   int argc,
19481c19481
<         p->openMode = (u8)deduceDatabaseType(zDbFilename, 
---
>         p->openMode = (u8)deduceDatabaseType(zDbFilename,
19487c19487
<         sqlite3_open_v2(zDbFilename, &p->db, 
---
>         sqlite3_open_v2(zDbFilename, &p->db,
19610c19610
<   } 
---
>   }
20851,20853c20851,20853
<   sqlite3 *db, 
<   int *pRc, 
<   const char *zSql, 
---
>   sqlite3 *db,
>   int *pRc,
>   const char *zSql,
20860c20860
<       raw_printf(stderr, "sql error: %s (%d)\n", 
---
>       raw_printf(stderr, "sql error: %s (%d)\n",
20876,20877c20876,20877
<   sqlite3 *db, 
<   int *pRc, 
---
>   sqlite3 *db,
>   int *pRc,
20879c20879
<   const char *zFmt, 
---
>   const char *zFmt,
20905c20905
<   int *pRc, 
---
>   int *pRc,
20927c20927
<   int *pRc, 
---
>   int *pRc,
20975c20975
< ** Print an error message for the .ar command to stderr and return 
---
> ** Print an error message for the .ar command to stderr and return
21056c21056
< ** successfully, otherwise an error message is written to stderr and 
---
> ** successfully, otherwise an error message is written to stderr and
21252c21252
<   int *pRc, 
---
>   int *pRc,
21267c21267
<           "%z%s name %s '%q' OR substr(name,1,%d) %s '%q/'", 
---
>           "%z%s name %s '%q' OR substr(name,1,%d) %s '%q/'",
21282c21282
< ** Implementation of .ar "lisT" command. 
---
> ** Implementation of .ar "lisT" command.
21285c21285
<   const char *zSql = "SELECT %s FROM %s WHERE %s"; 
---
>   const char *zSql = "SELECT %s FROM %s WHERE %s";
21307c21307
<             sqlite3_column_int(pSql, 1), 
---
>             sqlite3_column_int(pSql, 1),
21364c21364
< ** Implementation of .ar "eXtract" command. 
---
> ** Implementation of .ar "eXtract" command.
21367c21367
<   const char *zSql1 = 
---
>   const char *zSql1 =
21374c21374
<   const char *azExtraArg[] = { 
---
>   const char *azExtraArg[] = {
21400c21400
<   shellPreparePrintf(pAr->db, &rc, &pSql, zSql1, 
---
>   shellPreparePrintf(pAr->db, &rc, &pSql, zSql1,
21478c21478
<   const char *zCreate = 
---
>   const char *zCreate =
21520c21520
<   zTemp[0] = 0; 
---
>   zTemp[0] = 0;
21614c21614
<       if( cmd.eCmd==AR_CMD_CREATE || cmd.eCmd==AR_CMD_INSERT 
---
>       if( cmd.eCmd==AR_CMD_CREATE || cmd.eCmd==AR_CMD_INSERT
21625c21625
<       rc = sqlite3_open_v2(cmd.zFile, &cmd.db, flags, 
---
>       rc = sqlite3_open_v2(cmd.zFile, &cmd.db, flags,
21628c21628
<         utf8_printf(stderr, "cannot open file: %s (%s)\n", 
---
>         utf8_printf(stderr, "cannot open file: %s (%s)\n",
21744c21744
<       utf8_printf(stderr, "unexpected option: %s\n", azArg[i]); 
---
>       utf8_printf(stderr, "unexpected option: %s\n", azArg[i]);
22107c22107
<     rc = sqlite3_open_v2(zDestFile, &pDest, 
---
>     rc = sqlite3_open_v2(zDestFile, &pDest,
22357c22357
<     }   
---
>     }
22424c22424
<       
---
> 
22557c22557
<       raw_printf(stderr, 
---
>       raw_printf(stderr,
22576c22576
<       { "has_moved",      SQLITE_FCNTL_HAS_MOVED,       ""               },  
---
>       { "has_moved",      SQLITE_FCNTL_HAS_MOVED,       ""               },
22597c22597
<     if( zCmd[0]=='-' 
---
>     if( zCmd[0]=='-'
26384,26388c26384,26388
<       printf(
<         "SQLite version %s %.19s\n" /*extra-version-info*/
<         "Enter \".help\" for usage hints.\n",
<         sqlite3_libversion(), sqlite3_sourceid()
<       );
---
>     //   printf(
>     //     "SQLite version %s %.19s\n" /*extra-version-info*/
>     //     "Enter \".help\" for usage hints.\n",
>     //     sqlite3_libversion(), sqlite3_sourceid()
>     //   );
